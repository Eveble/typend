(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{144:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(9),i=(n(0),n(290)),o={title:"Creating Pattern",sidebar_label:"Creating Pattern"},l={id:"guides/04-advanced/03-creating-pattern",title:"Creating Pattern",description:"There are two types of patterns:",source:"@site/docs/guides/04-advanced/03-creating-pattern.md",permalink:"/typend/docs/guides/04-advanced/03-creating-pattern",sidebar_label:"Creating Pattern",sidebar:"guides",previous:{title:"Domain Driven Design",permalink:"/typend/docs/guides/04-advanced/02-ddd"},next:{title:"Creating Utility",permalink:"/typend/docs/guides/04-advanced/04-creating-utility"}},p=[{value:"Creating matcher",id:"creating-matcher",children:[]},{value:"Creating container",id:"creating-container",children:[]}],c={rightToc:p};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"There are two types of patterns:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"matchers")," - they are passed as instance or class constructor as expectation(",Object(i.b)("inlineCode",{parentName:"li"},"Integer"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Void"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Never"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Any")," etc..)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"containers")," - they require additional expectation(s) to be passed as arguments on construction(",Object(i.b)("inlineCode",{parentName:"li"},"Tuple"),", ",Object(i.b)("inlineCode",{parentName:"li"},"OneOf"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Optional"),", ",Object(i.b)("inlineCode",{parentName:"li"},"List"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Collection")," etc...).")),Object(i.b)("h3",{id:"creating-matcher"},"Creating matcher"),Object(i.b)("p",null,"For this example were going to create pattern that matches only positive numbers."),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"As first step, we need to create a new pattern that implements ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"../../api/classes/pattern"}),Object(i.b)("inlineCode",{parentName:"a"},"Pattern"))," interface:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { types, Pattern } from 'typend';\n\nexport class PositiveNumber extends Pattern implements types.Pattern {\n  public static kind = 'positiveNumber';\n}\n")),Object(i.b)("p",null,"Provided ",Object(i.b)("inlineCode",{parentName:"p"},"kind")," string returned by ",Object(i.b)("inlineCode",{parentName:"p"},"getKind()")," method will inform ",Object(i.b)("strong",{parentName:"p"},"typend")," which ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../../api/classes/patternvalidator"}),Object(i.b)("inlineCode",{parentName:"a"},"PatternValidator"))," should be used to validate the value. This significantly improves performance since selection of validator does not need to be evaluated."),Object(i.b)("p",null,"In this example ",Object(i.b)("strong",{parentName:"p"},"typend")," will search for validator that is registered for ",Object(i.b)("inlineCode",{parentName:"p"},"kind")," - ",Object(i.b)("inlineCode",{parentName:"p"},"positiveNumber"),"."),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Second step requires us to create dedicated validator matching ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"../../api/classes/patternvalidator"}),Object(i.b)("inlineCode",{parentName:"a"},"PatternValidator"))," interface:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"interface PatternValidator {\n  canValidate(expectation: Expectation, isStrict?: boolean): boolean;\n  validate(\n    value?: any,\n    expectation?: Expectation,\n    validator?: Validator\n  ): boolean;\n}\n")),Object(i.b)("p",null,"First lets import all things that will be needed to finish this pattern :"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { expect } from 'chai';\nimport {\n  Pattern,\n  types,\n  InvalidTypeError,\n  InvalidValueError,\n  PatternValidator,\n  typend,\n  check,\n  validate,\n} from 'typend';\n")),Object(i.b)("p",null,"Second were going to focus on pattern evaluation:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"export class PositiveNumberValidator extends PatternValidator implements types.PatternValidator {\n  public canValidate(expectation: types.Expectation): boolean {\n    return (expectation instanceof PositiveNumber);\n  }\n  ....\n}\n")),Object(i.b)("p",null,"This ensures, that only ",Object(i.b)("inlineCode",{parentName:"p"},"PositiveNumber")," instance as ",Object(i.b)("strong",{parentName:"p"},"expectations")," can used on value validation."),Object(i.b)("p",null,"Next, ",Object(i.b)("inlineCode",{parentName:"p"},"validate")," method needs to be implemented."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"export class PositiveNumberValidator implements types.PatternValidator {\n  ...\n  public validate(value: any): boolean {\n    if (!(typeof value === 'number')) {\n      throw new InvalidTypeError(\n        `Expected Number, got %s`,\n        PatternValidator.describer.describe(value)\n      );\n    }\n\n    if (value < 1) {\n      throw new InvalidValueError(\n        `Expected positive number, got %s`,\n        PatternValidator.describer.describe(value)\n      );\n    }\n    return true;\n  }\n}\n")),Object(i.b)("p",null,"We ensure that provided value is indeed a ",Object(i.b)("inlineCode",{parentName:"p"},"number")," type or throw ",Object(i.b)("inlineCode",{parentName:"p"},"InvalidTypeError"),". Also we ensure that provided number is not less then 1 or throw ",Object(i.b)("inlineCode",{parentName:"p"},"InvalidValueError"),"."),Object(i.b)("p",null,"We always ",Object(i.b)("strong",{parentName:"p"},"return")," ",Object(i.b)("inlineCode",{parentName:"p"},"true")," on end of the validation function."),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},"As third step, we need to wire up our new ",Object(i.b)("inlineCode",{parentName:"li"},"PositiveNumber")," pattern and ",Object(i.b)("inlineCode",{parentName:"li"},"PositiveNumberValidator")," validator on ",Object(i.b)("strong",{parentName:"li"},"typend"),". To do that we use:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"typend.validator.registerValidator(\n  'positiveNumber',\n  new PositiveNumberValidator()\n);\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Congratulations, you created new matching pattern!")),Object(i.b)("p",null,"Since ",Object(i.b)("strong",{parentName:"p"},"Typend")," allows matcher patterns to be passed in TypeScript declarations, you are now able to use your matcher like:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"check<PositiveNumber>(1);\n\nexpect(() => check<PositiveNumber>(-1)).to.throw(InvalidValueError);\n")),Object(i.b)("p",null,"You can reassign ",Object(i.b)("inlineCode",{parentName:"p"},"PositiveNumber")," to other, lowercased variable if you like to mimic TypeScript's notation:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"export { PositiveNumber as positive };\nimport { positive } from 'my-file';\n\ncheck<positive>(1);\n")),Object(i.b)("p",null,"Or you can use it in JavaScript API like:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"validate(1, PositiveNumber);\n\nexpect(() => validate(-1, PositiveNumber)).to.throw(InvalidValueError);\n")),Object(i.b)("h3",{id:"creating-container"},"Creating container"),Object(i.b)("p",null,"For this example were going to simplify ",Object(i.b)("inlineCode",{parentName:"p"},"Optional")," pattern already included in ",Object(i.b)("strong",{parentName:"p"},"Typend")),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"As first step, we need to create a new pattern that implements ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"../../api/classes/pattern"}),Object(i.b)("inlineCode",{parentName:"a"},".Pattern"))," interface:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { expect } from 'chai';\nimport { types, WrapperPattern, UnmatchedTypeError } from 'typend';\n\nexport class Optional extends WrapperPattern implements types.Pattern {\n  public static kind = 'optional';\n}\n")),Object(i.b)("p",null,"Were extending here ",Object(i.b)("inlineCode",{parentName:"p"},"WrapperPattern"),", since its much easier to debug complex, multi-level structures that are displayed in ",Object(i.b)("inlineCode",{parentName:"p"},"console.log")," like:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-batch"}),"{\n  ...\n  key: Optional ['my string']\n  ...\n}\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"For internal workings go to ",Object(i.b)("inlineCode",{parentName:"p"},"WrapperPattern")," component source code")),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Second step requires us to create dedicated validator matching ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"../../api/classes/patternvalidator"}),Object(i.b)("inlineCode",{parentName:"a"},"PatternValidator"))," interface.")),Object(i.b)("p",null,"Lets import necessary components:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { types } from 'typend';\nimport { Optional } from '../patterns/optional';\n")),Object(i.b)("p",null,"Again, we'll be first focusing on pattern evaluation:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"export class OptionalValidator implements types.PatternValidator {\n  public canValidate(expectation: types.Expectation): boolean {\n    return expectation instanceof Optional;\n  }\n  ...\n}\n")),Object(i.b)("p",null,"This time were ensuring, that only ",Object(i.b)("inlineCode",{parentName:"p"},"Optional")," pattern expectation can be used to validate related values."),Object(i.b)("p",null,"Next, ",Object(i.b)("inlineCode",{parentName:"p"},"validate")," method needs to be implemented."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"export class OptionalValidator implements types.PatternValidator {\n  ...\n  public validate(\n    value: any,\n    optional: Optional,\n    validator: types.Validator\n  ): boolean {\n    if (value === undefined) {\n      return true;\n    }\n    const expectation = optional instanceof Optional ? optional[0] : optional;\n    return validator.validate(value, expectation);\n  }\n}\n")),Object(i.b)("p",null,"We ensure, that value of ",Object(i.b)("inlineCode",{parentName:"p"},"any")," type can be validated, however accept only ",Object(i.b)("inlineCode",{parentName:"p"},"Optional")," expectations. Also, this time we pass third parameter to the function ",Object(i.b)("inlineCode",{parentName:"p"},"validator")," that on validation will be assigned to ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"../../api/classes/validator"}),Object(i.b)("inlineCode",{parentName:"a"},"Validator"))," implementation."),Object(i.b)("p",null,"Since we expect(allow) values to be ",Object(i.b)("inlineCode",{parentName:"p"},"undefined")," - we ensure that ",Object(i.b)("inlineCode",{parentName:"p"},"undefined")," always return true:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"if (value === undefined) {\n  return true;\n}\n")),Object(i.b)("p",null,"However, if value is assigned - we ensure that it's indeed matching the provided expectation (like ",Object(i.b)("inlineCode",{parentName:"p"},"new Optional(String)")," will require value to be ",Object(i.b)("inlineCode",{parentName:"p"},"undefined")," or instance of ",Object(i.b)("inlineCode",{parentName:"p"},"String"),").\nWe don't need to re-implement whole validation logic related to each type of validation - just pipe-through the enclosed expectation back to the validator:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"const expectation = optional instanceof Optional ? optional[0] : optional;\nreturn validator.validate(value, expectation);\n")),Object(i.b)("p",null,"This simplifies the validation logic by a lot and enforces consistent results."),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},"Third step like before is wiring. We need to wire up our new ",Object(i.b)("inlineCode",{parentName:"li"},"Optional")," pattern and ",Object(i.b)("inlineCode",{parentName:"li"},"OptionalValidator")," validator to ",Object(i.b)("strong",{parentName:"li"},"typend"),". To do that we use:")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"typend.validator.registerValidator('optional', new OptionalValidator());\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"However")," since ",Object(i.b)("strong",{parentName:"p"},"Typend")," already has a existing validator for ",Object(i.b)("inlineCode",{parentName:"p"},"optional")," kind were going to get error:"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Validator for type 'optional' would be overwritten. To override existing validator use 'Validator::overrideValidator'")),Object(i.b)("p",null,"We need to explicitly override existing one:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"typend.validator.overrideValidator('optional', new OptionalValidator());\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Congratulations, you created new container pattern!")),Object(i.b)("p",null,"To use it you just type:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"validate(undefined, new Optional(String));\nvalidate('foo', new Optional(String));\nexpect(() => validate(1234, new Optional(String))).to.throw(UnmatchedTypeError);\n")))}b.isMDXComponent=!0},290:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),s=b(n),u=a,m=s["".concat(o,".").concat(u)]||s[u]||d[u]||i;return n?r.a.createElement(m,l(l({ref:t},c),{},{components:n})):r.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);