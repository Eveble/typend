{
  "name": "typend",
  "version": "2.0.0",
  "description": "Runtime validation for TypeScript",
  "main": "dist/index.js",
  "module": "dist/index.es.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "author": {
    "name": "Adam Desivi, Eveble",
    "email": "eveble@eveble.com",
    "url": "https://eveble.com"
  },
  "homepage": "https://eveble.github.io/typend/",
  "keywords": [
    "eveble",
    "typend",
    "simplecheck",
    "check",
    "meteor",
    "variable",
    "instanceof",
    "instance",
    "evaluation",
    "matcher",
    "match",
    "typescript",
    "runtime",
    "validator",
    "validation"
  ],
  "bugs": "https://github.com/eveble/typend/issues",
  "license": "MIT",
  "engines": {
    "node": ">= 14.0.0",
    "npm": ">= 6.0.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/eveble/typend.git"
  },
  "dependencies": {
    "reflect-metadata": "^0.2.1",
    "tsruntime": "5.0.1",
    "ts-patch": "3.1.2",
    "@eveble/helpers": "^1.0.4",
    "deep-diff": "^1.0.2",
    "deepmerge": "^4.3.1",
    "es6-error": "^4.1.1",
    "lodash": "^4.17.21",
    "polytype": "^0.17.0"
  },
  "devDependencies": {
    "@types/chai-as-promised": "^7.1.2",
    "@types/chai": "^4.2.11",
    "@types/mocha": "^7.0.2",
    "@types/node": "^14.0.13",
    "@types/sinon-chai": "^3.2.4",
    "@types/sinon": "^9.0.4",
    "@typescript-eslint/eslint-plugin": "^8.44.0",
    "@typescript-eslint/parser": "^8.44.0",
    "babel-eslint": "10.1.0",
    "chai-as-promised": "^7.1.1",
    "chai": "^4.3.7",
    "cross-env": "^7.0.3",
    "mocha": "^7.2.0",
    "npm-scripts-info": "^0.3.9",
    "sinon-chai": "^3.5.0",
    "sinon": "^9.0.2",
    "source-map-support": "^0.5.19",
    "ts-node": "^8.10.1",
    "ts-sinon": "^1.2.0",
    "typescript": "5.3.2",
    "@commitlint/cli": "^8.3.5",
    "@commitlint/config-conventional": "^8.3.4",
    "commitizen": "^4.1.2",
    "cz-customizable": "^6.2.0",
    "husky": "^4.2.5",
    "@rollup/plugin-commonjs": "^24.1.0",
    "@rollup/plugin-json": "^6.0.0",
    "@rollup/plugin-node-resolve": "^15.0.2",
    "rollup-plugin-typescript2": "^0.34.1",
    "rollup": "^3.21.4",
    "eslint-config-airbnb-base": "^14.2.0",
    "eslint-config-prettier": "^6.11.0",
    "eslint-plugin-import": "^2.21.2",
    "eslint-plugin-mocha": "^7.0.1",
    "eslint-plugin-prettier": "^3.1.4",
    "eslint": "^8.50.0",
    "prettier": "^2.0.5",
    "pretty-quick": "^2.0.1",
    "lint-staged": "^10.2.11",
    "nyc": "^15.0.1",
    "@istanbuljs/nyc-config-typescript": "^1.0.1",
    "gulp-connect": "^5.7.0",
    "gulp-shell": "^0.8.0",
    "gulp-typedoc": "^2.2.5",
    "gulp": "^4.0.2",
    "typedoc-plugin-markdown": "^2.3.1",
    "typedoc": "^0.17.7",
    "semantic-release": "^17.0.8",
    "@semantic-release/changelog": "^5.0.1",
    "@semantic-release/git": "^9.0.0",
    "chalk": "^5.3.0",
    "rimraf": "^3.0.2"
  },
  "scripts": {
    "explain": "./node_modules/.bin/npm-scripts-info",
    "reset": "git clean -dfx && git reset --hard && npm i",
    "test:integration:watch": "./node_modules/.bin/cross-env NODE_ENV=test TS_NODE_PROJECT=./test/tsconfig.json TS_NODE_COMPILER=\"ts-patch/compiler\" ./node_modules/.bin/mocha --watch --config ./.mocharc.json ./test/integration",
    "test:integration": "./node_modules/.bin/cross-env NODE_ENV=test TS_NODE_PROJECT=./test/tsconfig.json TS_NODE_COMPILER=\"ts-patch/compiler\" ./node_modules/.bin/mocha --config ./.mocharc.json ./test/integration --exit",
    "test:unit:watch": "./node_modules/.bin/cross-env NODE_ENV=test TS_NODE_PROJECT=./test/tsconfig.json TS_NODE_COMPILER=\"ts-patch/compiler\" ./node_modules/.bin/mocha --watch --config ./.mocharc.json ./test/unit",
    "test:unit": "./node_modules/.bin/cross-env NODE_ENV=test TS_NODE_PROJECT=./test/tsconfig.json TS_NODE_COMPILER=\"ts-patch/compiler\" ./node_modules/.bin/mocha --config ./.mocharc.json ./test/unit --exit",
    "test:watch": "npm test -- --watch",
    "test": "./node_modules/.bin/cross-env NODE_ENV=test TS_NODE_PROJECT=./test/tsconfig.json TS_NODE_COMPILER=\"ts-patch/compiler\" ./node_modules/.bin/mocha --config ./.mocharc.json --exit",
    "cz": "node_modules/.bin/git-cz",
    "commit": "npm run cz",
    "build:cjs": "./node_modules/.bin/cross-env NODE_ENV=cjs rollup -c",
    "build:es": "./node_modules/.bin/cross-env NODE_ENV=es rollup -c",
    "build": "npm run clean && npm run build:es && npm run build:cjs",
    "clean": "./node_modules/.bin/rimraf dist",
    "lint": "./node_modules/.bin/eslint --fix 'src/**/*.{js,ts}' 'test/**/*.{js,ts}'",
    "test:lint": "./node_modules/.bin/eslint 'src/**/*.{js,ts}' 'test/**/*.{js,ts}'",
    "format": "node_modules/.bin/tsc --noEmit --skipLibCheck && ./node_modules/.bin/prettier --write 'src/**/*.{js,ts}' 'test/**/*.{js,ts}'",
    "format:staged": "./node_modules/.bin/pretty-quick --staged --no-restage --bail",
    "test:format": "./node_modules/.bin/prettier --check 'src/**/*.{js,ts}' 'test/**/*.{js,ts}'",
    "coverage:ci": "./node_modules/.bin/cross-env CI=true nyc report --reporter=text-lcov > coverage.lcov",
    "coverage:report": "./node_modules/.bin/nyc report --reporter=html --reporter=lcov",
    "coverage": "./node_modules/.bin/nyc npm run test",
    "test:coverage": "./node_modules/.bin/nyc --check-coverage=true npm run test",
    "docs:watch": "./node_modules/.bin/gulp docs:watch",
    "docs:clean": "./node_modules/.bin/rimraf website/docs/api/classes/* && ./node_modules/.bin/rimraf website/docs/api/interfaces/* && ./node_modules/.bin/rimraf website/docs/api/globals/md",
    "docs:build": "npm run docs:clean && ./node_modules/.bin/typedoc --tsconfig typedoc.json && node ./website/.eveble/scripts/interface-converter.js && rm ./website/docs/api/index.md && cd website && npm run build",
    "docs": "npm run docs:clean && ./node_modules/.bin/typedoc --tsconfig typedoc.json && node ./website/.eveble/scripts/interface-converter.js && rm ./website/docs/api/index.md && cd ./website && npm run start",
    "semantic-release": "semantic-release",
    "prepare": "npm run format && npm run lint && npm run build"
  },
  "scripts-info": {
    "explain": "Display information about the package scripts(info is already taken by yarn)",
    "reset": "Delete all untracked files and reset the repo to the last commit",
    "test:integration:watch": "Watch and rebuild the project on save, then rerun relevant integration tests",
    "test:integration": "Runs integrations tests",
    "test:unit:watch": "Watch and rebuild the project on save, then rerun relevant unit tests",
    "test:unit": "Runs unit tests",
    "test:watch": "Watch and rebuild the project on save, then rerun relevant tests",
    "test": "Run tests of the whole project",
    "cz": "Add commit matching Conventional Commit specification",
    "commit": "(alias) cz",
    "build": "Clean and build(bundle) the project with rollup",
    "clean": "Clean dist folder",
    "lint": "Try to automatically fix any linting problems",
    "test:lint": "Validate linting",
    "format": "Try to automatically fix any formatting problems",
    "format:staged": "Try to automatically fix any formatting problems for staged files or throw error",
    "test:format": "Validate formatting",
    "coverage:ci": "Generate reports for CI",
    "coverage:report": "Generate reports without displaying summary",
    "coverage": "Run tests, then create and display generated report(always finishes successfully)",
    "test:coverage": "Run tests, then crete and display generated report(fails if requirement is not met)",
    "docs:watch": "Generate API markdown documentation that is outputted to Docusaurus in watch mode(so it can previewed on-fly(new files require reload of Docusaurus!))",
    "docs:clean": "Remove auto-generated API from documentation",
    "docs:build": "Generate API markdown documentation that is outputted to Docusaurus and build as static files ready for publish",
    "docs": "Generates documentation and runs it in browser",
    "prepare": "One-step: test(with coverage), lint, clean, build, and prep a release",
    "semantic-release": "Release with semantic release"
  },
  "publishConfig": {
    "access": "public"
  }
}
